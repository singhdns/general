package com.example.first;

import java.io.File;
import java.util.ArrayList;
import java.util.List;


import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbFile;
import jcifs.smb.SmbFileOutputStream;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class fileBrowser extends ListActivity {

private List<String> item = null;
private List<String> path = null;
private String root="/";
private TextView myPath;
private String currentDir = root ;
private CommentsDataSource datasource;
private Comment comment = null;
private Boolean isRemote = false ;
public SmbFile[] smb_files;



/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    myPath = (TextView)findViewById(R.id.path);
    Bundle extras = getIntent().getExtras();
    
    datasource = new CommentsDataSource(this);
    datasource.open();
    
	if (extras != null) {
	    if (extras.containsKey("remote")) {
	    	this.isRemote = true ;
	    	android.util.Log.i("fileBrowser","browsing remote directory");
	    	//long id = extras.getLong("old_id");
	    	//comment = datasource.getCommentObject(id);
	    	this.root = "smb://192.168.1.1/u_disk/usb1_1/" ;
	    	this.currentDir = this.root ;
		}
	    
	    
	}
    
    getDir(this.currentDir);
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
	// Inflate the menu; this adds items to the action bar if it is present.
	getMenuInflater().inflate(R.menu.filebrowser , menu);
	
	return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // Handle item selection
    switch (item.getItemId()) {
        case R.id.action_settings_browser:
            finish();
            return true;
        default:
            return super.onOptionsItemSelected(item);
    }
}

@Override
public void finish() {
  // Prepare data intent 
  Intent data = new Intent();
  data.putExtra("selectedDir", currentDir);
  // Activity finished ok, return the data
  setResult(RESULT_OK, data);
  datasource.close();
  super.finish();
} 

private void getDir(String dirPath)
{
    myPath.setText("Location: " + dirPath);
    currentDir = dirPath ;
    item = new ArrayList<String>();
    path = new ArrayList<String>();

    
    
    if(this.isRemote){
    	  new getRemoteFilesTask().execute(currentDir);
    	  if(smb_files == null){
    		  Toast.makeText(fileBrowser.this, "No files found in remote dir " + currentDir, 
		                Toast.LENGTH_SHORT).show();
    	  }else{
    		  try{
    		    for(int i=0; i < smb_files.length; i++)
    		    {
    		            SmbFile file = smb_files[i];
    		            path.add(file.getPath());
    		            if(file.isDirectory())
    		                item.add(file.getName() + "/");
    		            else
    		                item.add(file.getName());
    		    } 
    		  }catch (Exception e) {
                  e.printStackTrace();
                  
              }
    	  }
    }else{
    	File f = new File(dirPath);
        File[] files = f.listFiles();
    
	    if(!dirPath.equals("/"))
	    {
	
	        item.add(root);
	        path.add(root);
	
	        item.add("../");
	        path.add(f.getParent());
	
	    }
	
	    for(int i=0; i < files.length; i++)
	    {
	            File file = files[i];
	            path.add(file.getPath());
	            if(file.isDirectory())
	                item.add(file.getName() + "/");
	            else
	                item.add(file.getName());
	    }
    }
    

    ArrayAdapter<String> fileList =
        new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, item);
    setListAdapter(fileList);
}

		@Override
		protected void onListItemClick(ListView l, View v, int position, long id) {
		
		    File file = new File(path.get(position));
		
		    if (file.isDirectory())
		    {
		        if(file.canRead())
		            getDir(path.get(position));
		        else
		        {
		            new AlertDialog.Builder(this)
		            .setIcon(R.drawable.ic_launcher)
		            .setTitle("[" + file.getName() + "] folder can't be read!")
		            .setPositiveButton("OK", 
		                    new DialogInterface.OnClickListener() {
		
		                        public void onClick(DialogInterface dialog, int which) {
		                            // TODO Auto-generated method stub
		                        }
		                    }).show();
		        }
		    }
		    else
		    {
		        new AlertDialog.Builder(this)
		            .setIcon(R.drawable.ic_launcher)
		            .setTitle("[" + file.getName() + "]")
		            .setPositiveButton("OK", 
		                    new DialogInterface.OnClickListener() {
		
		                        public void onClick(DialogInterface dialog, int which) {
		                            // TODO Auto-generated method stub
		                        }
		                    }).show();
		    }
		}


		private class getRemoteFilesTask extends AsyncTask<String, String, SmbFile[]> {
		    protected SmbFile[] doInBackground(String... dirs) {
;
		        SmbFile [] files = null ;
		        try {

		            String url = dirs[0];
         
		            SmbFile file = null;
		            SmbFile dir = null;
		            try {
		                // assume ANONYMOUS is my case but there is no description of this in JCIFS API
		                NtlmPasswordAuthentication auth = NtlmPasswordAuthentication.ANONYMOUS;
		                dir = new SmbFile(url, auth);
		                android.util.Log.i("TestApp",url);
		                android.util.Log.i( "TestApp", dir.listFiles().toString() );
		                files = dir.listFiles() ;
		                publishProgress("U-p-pploaded file new_file.txt");
		
		            } catch (Exception e) {
		                e.printStackTrace();
		            }
		
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		        
		        return files;
		    }
		
		    protected void onProgressUpdate(String... progress) {
		        
		    }
		
		    protected void onPostExecute(SmbFile[] results) {
		    	smb_files = results ;
		    	Toast.makeText(fileBrowser.this, "Completed obtaining remote files", 
		                Toast.LENGTH_SHORT).show();

		    }
		}	




}

