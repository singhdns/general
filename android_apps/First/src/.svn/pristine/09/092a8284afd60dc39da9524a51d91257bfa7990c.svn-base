package com.example.first;

import java.io.File;

import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbFile;
import jcifs.smb.SmbFileOutputStream;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.view.Menu;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends Activity {
    private static int FILE_BROWSER_CODE = 100 ;
    EditText log_view;

	  public static final String TABLE_COMMENTS       = "comments";    
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		//save2Samba("test from android","from_ndroid.txt");
		final Button button = (Button) findViewById(R.id.buttonExecute);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                 browse(v) ;
            }
        });
        
        
        final Button buttonManage = (Button) findViewById(R.id.buttonManage);
        buttonManage.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                 manageDatabase(v) ;
            }
        });   
        
        final Button buttonUpload = (Button) findViewById(R.id.buttonUpload);
        buttonUpload.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	 new UploadFilesTask().execute("test","test1");
            }
        });
        
        final Button buttonDropTable = (Button) findViewById(R.id.buttonDropTable);
        buttonDropTable.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	
		    	AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
		    	builder
		    	.setTitle("Remove the entire database")
		    	.setMessage("Are you sure?")
		    	.setIcon(android.R.drawable.ic_dialog_alert)
		    	.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
		    	    public void onClick(DialogInterface dialog, int which) {			      	
		    	    	//Yes button clicked, do something
		            	
		            	
		            	deleteEntireTable() ;
		    	    }
		    	})
		    	.setNegativeButton("No", null)						//Do nothing on no
		    	.show();            	

            	
            }
        });        
        
        log_view = (EditText) findViewById(R.id.editTextLog);
        log_view.append("initial text"); 
        
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	  public void deleteEntireTable() {	
		  
		  MySQLiteHelper dbHelper = new MySQLiteHelper(this);
		  SQLiteDatabase database = dbHelper.getWritableDatabase();
		  database.execSQL("DROP TABLE IF EXISTS " + TABLE_COMMENTS);
		  dbHelper.close() ;
		  this.deleteDatabase("commments.db");
	    	Toast.makeText(this, "Entire database has been deleted", 
                         Toast.LENGTH_SHORT).show();	


	  }	 	
	public String browse(View v) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu.main, menu);
    	Intent i = new Intent(this , fileBrowser.class);
    	startActivityForResult(i,FILE_BROWSER_CODE); 		
		return "test";
	}	
	public String manageDatabase(View v) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu.main, menu);
    	Intent i = new Intent(this , ManageDatabaseActivity.class);
    	//startActivityForResult(i,FILE_BROWSER_CODE); 		
    	startActivity(i); 		
		return "test";
	}	
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	  if (resultCode == RESULT_OK && requestCode == FILE_BROWSER_CODE) {
	    if (data.hasExtra("selectedDir")) {
	      Toast.makeText(this, data.getExtras().getString("selectedDir"),
	        Toast.LENGTH_SHORT).show();
	    }
	  }
	} 	
	
	public boolean save2Samba(String text, String fileName) {
        try {

            // My Windows shares doesn't require any login/password
            // String name="login";//my windows username
            // String password="password1";//my windows password

            String sSambaFolder = "192.168.1.1/u_disk/usb1_1/" ;
            String url = "smb://" + sSambaFolder.toLowerCase()+fileName;
            String baseDirExt = Environment.getExternalStorageDirectory().getAbsolutePath();           
            String baseDirInt = getFilesDir().getAbsolutePath() ;
            android.util.Log.i("baseDirExt",baseDirExt);
            android.util.Log.i("baseDirInt",baseDirInt);
            
            File rootDir = new File("/") ;
            String baseDirRoot = rootDir.getPath() ;
            android.util.Log.i("baseDirRoot",baseDirRoot);         
            File [] rootDirs = rootDir.listFiles() ;
            for (int i = 0; i < rootDirs.length; i++) { 
            	android.util.Log.i( "baseDirRoot_level1", rootDirs[i].getName() );
            }            
            SmbFile file = null;
            SmbFile dir = null;
            try {
                // assume ANONYMOUS is my case but there is no description of this in JCIFS API
                NtlmPasswordAuthentication auth = NtlmPasswordAuthentication.ANONYMOUS;
                file = new SmbFile(url, auth);
                dir = new SmbFile("smb://" + sSambaFolder.toLowerCase(), auth);
                android.util.Log.i("TestApp",url);
                android.util.Log.i( "TestApp", dir.listFiles().toString() );
                SmbFile [] files = dir.listFiles() ;
                for (int i = 0; i < files.length; i++) { 
                	android.util.Log.i( "TestApp", files[i].getName() );
                }
                // output is like smb://mypc/e/sharedfoldername/file.txt;
                SmbFileOutputStream out = new SmbFileOutputStream(file);
                out.write(text.getBytes());
                out.flush();
                out.close();

            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
	
	private class UploadFilesTask extends AsyncTask<String, String, Long> {
	     protected Long doInBackground(String... dirs) {
	         int count = dirs.length;
	         long totalSize = 0;
	         //for (int i = 0; i < count; i++) {
	         //    totalSize += Downloader.downloadFile(urls[i]);
	         //    publishProgress((int) ((i / (float) count) * 100));
	         //    // Escape early if cancel() is called
	         //    if (isCancelled()) break;
	         //}
	         try {

	             // My Windows shares doesn't require any login/password
	             // String name="login";//my windows username
	             // String password="password1";//my windows password
                 String text = "from android" ;
                 String fileName = "new_file.txt" ;
	             String sSambaFolder = "192.168.1.1/u_disk/usb1_1/" ;
	             String url = "smb://" + sSambaFolder.toLowerCase()+fileName;
	             String baseDirExt = Environment.getExternalStorageDirectory().getAbsolutePath();           
	             String baseDirInt = getFilesDir().getAbsolutePath() ;
	             android.util.Log.i("baseDirExt",baseDirExt);
	             android.util.Log.i("baseDirInt",baseDirInt);
	             
	             File rootDir = new File("/") ;
	             String baseDirRoot = rootDir.getPath() ;
	             android.util.Log.i("baseDirRoot",baseDirRoot);         
	             File [] rootDirs = rootDir.listFiles() ;
	             for (int i = 0; i < rootDirs.length; i++) { 
	             	android.util.Log.i( "baseDirRoot_level1", rootDirs[i].getName() );
	             }            
	             SmbFile file = null;
	             SmbFile dir = null;
	             try {
	                 // assume ANONYMOUS is my case but there is no description of this in JCIFS API
	                 NtlmPasswordAuthentication auth = NtlmPasswordAuthentication.ANONYMOUS;
	                 file = new SmbFile(url, auth);
	                 dir = new SmbFile("smb://" + sSambaFolder.toLowerCase(), auth);
	                 android.util.Log.i("TestApp",url);
	                 android.util.Log.i( "TestApp", dir.listFiles().toString() );
	                 SmbFile [] files = dir.listFiles() ;
	                 for (int i = 0; i < files.length; i++) { 
	                 	android.util.Log.i( "TestApp", files[i].getName() );
	                 }
	                 // output is like smb://mypc/e/sharedfoldername/file.txt;
	                 SmbFileOutputStream out = new SmbFileOutputStream(file);
	                 out.write(text.getBytes());
	                 out.flush();
	                 out.close();
	                 publishProgress("Uploaded file new_file.txt");

	             } catch (Exception e) {
	                 e.printStackTrace();
	             }

	         } catch (Exception e) {
	             e.printStackTrace();
	         }
	         
	         return totalSize;
	     }

	     protected void onProgressUpdate(String... progress) {
	         log_view.append(progress[0]) ;
	     }

	     protected void onPostExecute(Long result) {
	    	 log_view.append("finished") ;
	         //showDialog("Downloaded " + result + " bytes");
	     }
	}	
	
}
